//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:/Users/tway/dev/FeedRead/core/libs/gson-2.3.1-sources.jar!com/google/gson/reflect/TypeToken.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/internal/$Gson$Preconditions.h"
#include "com/google/gson/internal/$Gson$Types.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComGoogleGsonReflectTypeToken ()

+ (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from
                withJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)to;

+ (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from
               withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)to
                                    withJavaUtilMap:(id<JavaUtilMap>)typeVarMap;

+ (jboolean)typeEqualsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)from
                      withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)to
                                           withJavaUtilMap:(id<JavaUtilMap>)typeVarMap;

+ (JavaLangAssertionError *)buildUnexpectedTypeErrorWithJavaLangReflectType:(id<JavaLangReflectType>)token
                                                          withIOSClassArray:(IOSObjectArray *)expected;

+ (jboolean)matchesWithJavaLangReflectType:(id<JavaLangReflectType>)from
                   withJavaLangReflectType:(id<JavaLangReflectType>)to
                           withJavaUtilMap:(id<JavaUtilMap>)typeMap;

@end

__attribute__((unused)) static id<JavaLangReflectType> ComGoogleGsonReflectTypeToken_getType(ComGoogleGsonReflectTypeToken *self);

__attribute__((unused)) static jboolean ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectGenericArrayType_(id<JavaLangReflectType> from, id<JavaLangReflectGenericArrayType> to);

__attribute__((unused)) static jboolean ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectType> from, id<JavaLangReflectParameterizedType> to, id<JavaUtilMap> typeVarMap);

__attribute__((unused)) static jboolean ComGoogleGsonReflectTypeToken_typeEqualsWithJavaLangReflectParameterizedType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectParameterizedType> from, id<JavaLangReflectParameterizedType> to, id<JavaUtilMap> typeVarMap);

__attribute__((unused)) static JavaLangAssertionError *ComGoogleGsonReflectTypeToken_buildUnexpectedTypeErrorWithJavaLangReflectType_withIOSClassArray_(id<JavaLangReflectType> token, IOSObjectArray *expected);

__attribute__((unused)) static jboolean ComGoogleGsonReflectTypeToken_matchesWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> from, id<JavaLangReflectType> to, id<JavaUtilMap> typeMap);

@implementation ComGoogleGsonReflectTypeToken

- (instancetype)init {
  ComGoogleGsonReflectTypeToken_init(self);
  return self;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(self, type);
  return self;
}

+ (id<JavaLangReflectType>)getSuperclassTypeParameterWithIOSClass:(IOSClass *)subclass {
  return ComGoogleGsonReflectTypeToken_getSuperclassTypeParameterWithIOSClass_(subclass);
}

- (IOSClass *)getRawType {
  return rawType_;
}

- (id<JavaLangReflectType>)getType {
  return ComGoogleGsonReflectTypeToken_getType(self);
}

- (jboolean)isAssignableFromWithIOSClass:(IOSClass *)cls {
  return [self isAssignableFromWithJavaLangReflectType:cls];
}

- (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from {
  if (from == nil) {
    return NO;
  }
  if ([((id<JavaLangReflectType>) nil_chk(type_)) isEqual:from]) {
    return YES;
  }
  if ([type_ isKindOfClass:[IOSClass class]]) {
    return [((IOSClass *) nil_chk(rawType_)) isAssignableFrom:ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(from)];
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type_]) {
    return ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(from, (id<JavaLangReflectParameterizedType>) check_protocol_cast(type_, @protocol(JavaLangReflectParameterizedType)), new_JavaUtilHashMap_init());
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type_]) {
    return [((IOSClass *) nil_chk(rawType_)) isAssignableFrom:ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(from)] && ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectGenericArrayType_(from, (id<JavaLangReflectGenericArrayType>) check_protocol_cast(type_, @protocol(JavaLangReflectGenericArrayType)));
  }
  else {
    @throw ComGoogleGsonReflectTypeToken_buildUnexpectedTypeErrorWithJavaLangReflectType_withIOSClassArray_(type_, [IOSObjectArray newArrayWithObjects:(id[]){ IOSClass_class_(), JavaLangReflectParameterizedType_class_(), JavaLangReflectGenericArrayType_class_() } count:3 type:IOSClass_class_()]);
  }
}

- (jboolean)isAssignableFromWithComGoogleGsonReflectTypeToken:(ComGoogleGsonReflectTypeToken *)token {
  return [self isAssignableFromWithJavaLangReflectType:ComGoogleGsonReflectTypeToken_getType(nil_chk(token))];
}

+ (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from
                withJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)to {
  return ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectGenericArrayType_(from, to);
}

+ (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from
               withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)to
                                    withJavaUtilMap:(id<JavaUtilMap>)typeVarMap {
  return ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(from, to, typeVarMap);
}

+ (jboolean)typeEqualsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)from
                      withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)to
                                           withJavaUtilMap:(id<JavaUtilMap>)typeVarMap {
  return ComGoogleGsonReflectTypeToken_typeEqualsWithJavaLangReflectParameterizedType_withJavaLangReflectParameterizedType_withJavaUtilMap_(from, to, typeVarMap);
}

+ (JavaLangAssertionError *)buildUnexpectedTypeErrorWithJavaLangReflectType:(id<JavaLangReflectType>)token
                                                          withIOSClassArray:(IOSObjectArray *)expected {
  return ComGoogleGsonReflectTypeToken_buildUnexpectedTypeErrorWithJavaLangReflectType_withIOSClassArray_(token, expected);
}

+ (jboolean)matchesWithJavaLangReflectType:(id<JavaLangReflectType>)from
                   withJavaLangReflectType:(id<JavaLangReflectType>)to
                           withJavaUtilMap:(id<JavaUtilMap>)typeMap {
  return ComGoogleGsonReflectTypeToken_matchesWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(from, to, typeMap);
}

- (NSUInteger)hash {
  return self->hashCode__;
}

- (jboolean)isEqual:(id)o {
  return [o isKindOfClass:[ComGoogleGsonReflectTypeToken class]] && ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(type_, ((ComGoogleGsonReflectTypeToken *) nil_chk(((ComGoogleGsonReflectTypeToken *) check_class_cast(o, [ComGoogleGsonReflectTypeToken class]))))->type_);
}

- (NSString *)description {
  return ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(type_);
}

+ (ComGoogleGsonReflectTypeToken *)getWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(type);
}

+ (ComGoogleGsonReflectTypeToken *)getWithIOSClass:(IOSClass *)type {
  return ComGoogleGsonReflectTypeToken_getWithIOSClass_(type);
}

+ (IOSObjectArray *)__annotations_isAssignableFromWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isAssignableFromWithJavaLangReflectType_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isAssignableFromWithComGoogleGsonReflectTypeToken_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TypeToken", NULL, 0x4, NULL, NULL },
    { "initWithJavaLangReflectType:", "TypeToken", NULL, 0x0, NULL, NULL },
    { "getSuperclassTypeParameterWithIOSClass:", "getSuperclassTypeParameter", "Ljava.lang.reflect.Type;", 0x8, NULL, NULL },
    { "getRawType", NULL, "Ljava.lang.Class;", 0x11, NULL, NULL },
    { "getType", NULL, "Ljava.lang.reflect.Type;", 0x11, NULL, NULL },
    { "isAssignableFromWithIOSClass:", "isAssignableFrom", "Z", 0x1, NULL, NULL },
    { "isAssignableFromWithJavaLangReflectType:", "isAssignableFrom", "Z", 0x1, NULL, NULL },
    { "isAssignableFromWithComGoogleGsonReflectTypeToken:", "isAssignableFrom", "Z", 0x1, NULL, NULL },
    { "isAssignableFromWithJavaLangReflectType:withJavaLangReflectGenericArrayType:", "isAssignableFrom", "Z", 0xa, NULL, NULL },
    { "isAssignableFromWithJavaLangReflectType:withJavaLangReflectParameterizedType:withJavaUtilMap:", "isAssignableFrom", "Z", 0xa, NULL, NULL },
    { "typeEqualsWithJavaLangReflectParameterizedType:withJavaLangReflectParameterizedType:withJavaUtilMap:", "typeEquals", "Z", 0xa, NULL, NULL },
    { "buildUnexpectedTypeErrorWithJavaLangReflectType:withIOSClassArray:", "buildUnexpectedTypeError", "Ljava.lang.AssertionError;", 0x8a, NULL, NULL },
    { "matchesWithJavaLangReflectType:withJavaLangReflectType:withJavaUtilMap:", "matches", "Z", 0xa, NULL, NULL },
    { "hash", "hashCode", "I", 0x11, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getWithJavaLangReflectType:", "get", "Lcom.google.gson.reflect.TypeToken;", 0x9, NULL, NULL },
    { "getWithIOSClass:", "get", "Lcom.google.gson.reflect.TypeToken;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lcom/google/gson/reflect/TypeToken<TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rawType_", NULL, 0x10, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<-TT;>;",  },
    { "type_", NULL, 0x10, "Ljava.lang.reflect.Type;", NULL, NULL,  },
    { "hashCode__", "hashCode", 0x10, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComGoogleGsonReflectTypeToken = { 2, "TypeToken", "com.google.gson.reflect", NULL, 0x1, 18, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_ComGoogleGsonReflectTypeToken;
}

@end

void ComGoogleGsonReflectTypeToken_init(ComGoogleGsonReflectTypeToken *self) {
  (void) NSObject_init(self);
  self->type_ = ComGoogleGsonReflectTypeToken_getSuperclassTypeParameterWithIOSClass_([self getClass]);
  self->rawType_ = (IOSClass *) check_class_cast(ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(self->type_), [IOSClass class]);
  self->hashCode__ = ((jint) [((id<JavaLangReflectType>) nil_chk(self->type_)) hash]);
}

ComGoogleGsonReflectTypeToken *new_ComGoogleGsonReflectTypeToken_init() {
  ComGoogleGsonReflectTypeToken *self = [ComGoogleGsonReflectTypeToken alloc];
  ComGoogleGsonReflectTypeToken_init(self);
  return self;
}

void ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(ComGoogleGsonReflectTypeToken *self, id<JavaLangReflectType> type) {
  (void) NSObject_init(self);
  self->type_ = ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(ComGoogleGsonInternal$Gson$Preconditions_checkNotNullWithId_(type));
  self->rawType_ = (IOSClass *) check_class_cast(ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(self->type_), [IOSClass class]);
  self->hashCode__ = ((jint) [((id<JavaLangReflectType>) nil_chk(self->type_)) hash]);
}

ComGoogleGsonReflectTypeToken *new_ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonReflectTypeToken *self = [ComGoogleGsonReflectTypeToken alloc];
  ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(self, type);
  return self;
}

id<JavaLangReflectType> ComGoogleGsonReflectTypeToken_getSuperclassTypeParameterWithIOSClass_(IOSClass *subclass) {
  ComGoogleGsonReflectTypeToken_initialize();
  id<JavaLangReflectType> superclass_ = [((IOSClass *) nil_chk(subclass)) getGenericSuperclass];
  if ([superclass_ isKindOfClass:[IOSClass class]]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Missing type parameter.");
  }
  id<JavaLangReflectParameterizedType> parameterized = (id<JavaLangReflectParameterizedType>) check_protocol_cast(superclass_, @protocol(JavaLangReflectParameterizedType));
  return ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(parameterized)) getActualTypeArguments]), 0));
}

id<JavaLangReflectType> ComGoogleGsonReflectTypeToken_getType(ComGoogleGsonReflectTypeToken *self) {
  return self->type_;
}

jboolean ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectGenericArrayType_(id<JavaLangReflectType> from, id<JavaLangReflectGenericArrayType> to) {
  ComGoogleGsonReflectTypeToken_initialize();
  id<JavaLangReflectType> toGenericComponentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(to)) getGenericComponentType];
  if ([JavaLangReflectParameterizedType_class_() isInstance:toGenericComponentType]) {
    id<JavaLangReflectType> t = from;
    if ([JavaLangReflectGenericArrayType_class_() isInstance:from]) {
      t = [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) check_protocol_cast(from, @protocol(JavaLangReflectGenericArrayType))))) getGenericComponentType];
    }
    else if ([from isKindOfClass:[IOSClass class]]) {
      IOSClass *classType = (IOSClass *) check_class_cast(from, [IOSClass class]);
      while ([((IOSClass *) nil_chk(classType)) isArray]) {
        classType = [classType getComponentType];
      }
      t = classType;
    }
    return ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(t, (id<JavaLangReflectParameterizedType>) check_protocol_cast(toGenericComponentType, @protocol(JavaLangReflectParameterizedType)), new_JavaUtilHashMap_init());
  }
  return YES;
}

jboolean ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectType> from, id<JavaLangReflectParameterizedType> to, id<JavaUtilMap> typeVarMap) {
  ComGoogleGsonReflectTypeToken_initialize();
  if (from == nil) {
    return NO;
  }
  if ([((id<JavaLangReflectParameterizedType>) nil_chk(to)) isEqual:from]) {
    return YES;
  }
  IOSClass *clazz = ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(from);
  id<JavaLangReflectParameterizedType> ptype = nil;
  if ([JavaLangReflectParameterizedType_class_() isInstance:from]) {
    ptype = (id<JavaLangReflectParameterizedType>) check_protocol_cast(from, @protocol(JavaLangReflectParameterizedType));
  }
  if (ptype != nil) {
    IOSObjectArray *tArgs = [ptype getActualTypeArguments];
    IOSObjectArray *tParams = [((IOSClass *) nil_chk(clazz)) getTypeParameters];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tArgs))->size_; i++) {
      id<JavaLangReflectType> arg = IOSObjectArray_Get(tArgs, i);
      id<JavaLangReflectTypeVariable> var = IOSObjectArray_Get(nil_chk(tParams), i);
      while ([JavaLangReflectTypeVariable_class_() isInstance:arg]) {
        id<JavaLangReflectTypeVariable> v = (id<JavaLangReflectTypeVariable>) check_protocol_cast(arg, @protocol(JavaLangReflectTypeVariable));
        arg = [((id<JavaUtilMap>) nil_chk(typeVarMap)) getWithId:[((id<JavaLangReflectTypeVariable>) nil_chk(v)) getName]];
      }
      (void) [((id<JavaUtilMap>) nil_chk(typeVarMap)) putWithId:[((id<JavaLangReflectTypeVariable>) nil_chk(var)) getName] withId:arg];
    }
    if (ComGoogleGsonReflectTypeToken_typeEqualsWithJavaLangReflectParameterizedType_withJavaLangReflectParameterizedType_withJavaUtilMap_(ptype, to, typeVarMap)) {
      return YES;
    }
  }
  {
    IOSObjectArray *a__ = [((IOSClass *) nil_chk(clazz)) getGenericInterfaces];
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> itype = *b__++;
      if (ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(itype, to, new_JavaUtilHashMap_initWithJavaUtilMap_(typeVarMap))) {
        return YES;
      }
    }
  }
  id<JavaLangReflectType> sType = [clazz getGenericSuperclass];
  return ComGoogleGsonReflectTypeToken_isAssignableFromWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(sType, to, new_JavaUtilHashMap_initWithJavaUtilMap_(typeVarMap));
}

jboolean ComGoogleGsonReflectTypeToken_typeEqualsWithJavaLangReflectParameterizedType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectParameterizedType> from, id<JavaLangReflectParameterizedType> to, id<JavaUtilMap> typeVarMap) {
  ComGoogleGsonReflectTypeToken_initialize();
  if ([((id<JavaLangReflectType>) nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(from)) getRawType])) isEqual:[((id<JavaLangReflectParameterizedType>) nil_chk(to)) getRawType]]) {
    IOSObjectArray *fromArgs = [from getActualTypeArguments];
    IOSObjectArray *toArgs = [to getActualTypeArguments];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fromArgs))->size_; i++) {
      if (!ComGoogleGsonReflectTypeToken_matchesWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(IOSObjectArray_Get(fromArgs, i), IOSObjectArray_Get(nil_chk(toArgs), i), typeVarMap)) {
        return NO;
      }
    }
    return YES;
  }
  return NO;
}

JavaLangAssertionError *ComGoogleGsonReflectTypeToken_buildUnexpectedTypeErrorWithJavaLangReflectType_withIOSClassArray_(id<JavaLangReflectType> token, IOSObjectArray *expected) {
  ComGoogleGsonReflectTypeToken_initialize();
  JavaLangStringBuilder *exceptionMessage = new_JavaLangStringBuilder_initWithNSString_(@"Unexpected type. Expected one of: ");
  {
    IOSObjectArray *a__ = expected;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *clazz = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([exceptionMessage appendWithNSString:[((IOSClass *) nil_chk(clazz)) getName]])) appendWithNSString:@", "];
    }
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([exceptionMessage appendWithNSString:@"but got: "])) appendWithNSString:[[((id<JavaLangReflectType>) nil_chk(token)) getClass] getName]])) appendWithNSString:@", for type token: "])) appendWithNSString:[token description]])) appendWithChar:'.'];
  return new_JavaLangAssertionError_initWithId_([exceptionMessage description]);
}

jboolean ComGoogleGsonReflectTypeToken_matchesWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> from, id<JavaLangReflectType> to, id<JavaUtilMap> typeMap) {
  ComGoogleGsonReflectTypeToken_initialize();
  return [((id<JavaLangReflectType>) nil_chk(to)) isEqual:from] || ([JavaLangReflectTypeVariable_class_() isInstance:from] && [to isEqual:[((id<JavaUtilMap>) nil_chk(typeMap)) getWithId:[((id<JavaLangReflectTypeVariable>) nil_chk(((id<JavaLangReflectTypeVariable>) check_protocol_cast(from, @protocol(JavaLangReflectTypeVariable))))) getName]]]);
}

ComGoogleGsonReflectTypeToken *ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonReflectTypeToken_initialize();
  return new_ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(type);
}

ComGoogleGsonReflectTypeToken *ComGoogleGsonReflectTypeToken_getWithIOSClass_(IOSClass *type) {
  ComGoogleGsonReflectTypeToken_initialize();
  return new_ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(type);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonReflectTypeToken)
